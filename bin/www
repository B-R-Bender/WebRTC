#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('server:server');
const http = require('http');
const WebSocket = require('ws');
const url = require('url');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3377');
app.set('port', port);

/**
 * Create HTTP/WS server.
 */

const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

/**
 * Listen on provided port, on all network interfaces.
 */

wss.on('connection', function connection(ws, req) {
    const location = url.parse(req.url, true);
    // You might use location.query.access_token to authenticate or share sessions
    // or req.headers.cookie (see http://stackoverflow.com/a/16395220/151312)
    ws.send('Connected to local WS server');
    console.log('Client connected');

    ws.on('message', function (data) {
        let requestData;
        try {
            requestData = JSON.parse(data);
        } catch (err) {
            ws.send(JSON.stringify({error: err.message}));
        }

        if (requestData.type === "offer") {
            require("./peer/actions")();
        }
    });
});

server.listen(port, function listening() {
    console.log('Listening on %d', server.address().port);
});

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/*
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/!**
 * Normalize a port into a number, string, or false.
 *!/


/!**
 * Event listener for HTTP server "error" event.
 *!/

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/!**
 * Event listener for HTTP server "listening" event.
 *!/

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
*/
